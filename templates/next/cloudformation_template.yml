AWSTemplateFormatVersion: "2010-09-09"
Description: "Static website hosting with S3 and CloudFront"
Parameters:
  DefaultRootObject:
    Description: "The default path for the index document."
    Type: String
    Default: "index.html"
  ErrorPagePath:
    Description: "The path of the error page for the website (e.g. /error.html). Must be a root-relative path."
    Type: String
    Default: "/404.html"
Resources:
  # Create the bucket to contain the website HTML
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      WebsiteConfiguration:
        ErrorDocument: !Ref ErrorPagePath
        IndexDocument: !Ref DefaultRootObject
  # Configure the bucket as a CloudFront Origin
  ReadPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal: "*"
  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket
  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCode: 403 # not found
            ResponseCode: 404
            ResponsePagePath: !Ref ErrorPagePath
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 86400 # in seconds
          MinTTL: 60 # in seconds
          TargetOriginId: s3origin
          ViewerProtocolPolicy: "allow-all"
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !Ref ViewerRequestLambdaVersion
            - EventType: origin-request
              LambdaFunctionARN: !Ref OriginRequestLambdaVersion
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !Sub "${S3Bucket}.s3-website.us-east-1.amazonaws.com"
            Id: s3origin
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        PriceClass: "PriceClass_All"
  ViewerRequestLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt ViewerRequestLambdaRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: |
          const headerName = 'x-original-referer';
          exports.handler = (event, context, callback) => {
            const request = event.Records[0].cf.request;
            const endOfUri = request.uri.slice(-6);
            if (!endOfUri.match(/\.(html|js|jsx|css)$/) && endOfUri.slice(-6).includes('.')) {
              const referer = request.headers['referer'][0].value;
              // Store request's `Referer` header as `X-Original-Referer`
              // for further processing in `origin-request` event.
              request.headers[headerName] = [{
                key: headerName,
                value: referer,
              }];
              console.log(request);
              callback(null, request);
            } else {
              console.log(request);
              callback(null, request);
            }
          };
  ViewerRequestLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ViewerRequestLambdaVersion:
    Type: "AWS::Lambda::Version"
    Properties:
      FunctionName: !Ref ViewerRequestLambda
  OriginRequestLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt OriginRequestLambdaRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: |
          const headerName = 'x-original-referer';
          exports.handler = (event, context, callback) => {
            const request = event.Records[0].cf.request;
            if (request.headers[headerName]) {
              // Read the contents of `X-Original-Referer` header, and split
              // the domain into basepath.
              const originalReferer = request.headers[headerName][0].value;
              const basepath = originalReferer.split('cloudfront.net')[1];
              // const uri = request.uri;
              // Use basepath to build S3 path.
              const path = basepath.match(/(\/[^\/]+){2}/)[0];
              request.origin.custom.path = path;
              console.log(request);
              callback(null, request);
            } else {
              if (request.uri.split('/').length === 3) {
                // if you navigate to root page and leave out the '/'
                request.uri += '/index';
              } else if (!request.uri.split('/')[3]) {
                // if you navigate to root page and include the '/'
                request.uri += 'index';
              }
              // include extension if it has 
              if (!request.uri.includes('.')) request.uri += '.html';
              console.log(request);
              callback(null, request);
            }
          };
  OriginRequestLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  OriginRequestLambdaVersion:
    Type: "AWS::Lambda::Version"
    Properties:
      FunctionName: !Ref OriginRequestLambda
  # Create an IAM user with Access Keys to enable automated deployment of the website to this bucket
  # PublishUser:
  #   Type: 'AWS::IAM::User'
  #   Properties:
  #     Policies:
  #       - PolicyName: !Sub 'publish-to-${S3Bucket}'
  #         PolicyDocument:
  #           Statement:
  #           - Action: 's3:*'
  #             Effect: Allow
  #             Resource:
  #             - !Sub 'arn:aws:s3:::${S3Bucket}'
  #             - !Sub 'arn:aws:s3:::${S3Bucket}/*'
  # PublishCredentials:
  #   Type: 'AWS::IAM::AccessKey'
  #   Properties:
  #     UserName: !Ref PublishUser
Outputs:
  BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref S3Bucket
  # AccessKeyId:
  #   Description: 'S3 Access Key'
  #   Value: !Ref PublishCredentials
  # AccessKeySecret:
  #   Description: 'S3 Secret Key'
  #   Value: !GetAtt PublishCredentials.SecretAccessKey
  DistributionId:
    Description: "CloudFront Distribution ID"
    Value: !Ref CloudFrontDistribution
  Domain:
    Description: "Cloudfront Domain"
    Value: !GetAtt CloudFrontDistribution.DomainName
